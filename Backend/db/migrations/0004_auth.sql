-- === Auth & Sessions ===

-- Role enum
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
        CREATE TYPE user_role AS ENUM ('admin', 'analyst', 'viewer');
    END IF;
END$$;

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id              BIGSERIAL PRIMARY KEY,
    email           VARCHAR(255) NOT NULL UNIQUE,
    password_hash   TEXT NOT NULL,            -- store Argon2id/BCrypt hash from the app
    role            user_role NOT NULL DEFAULT 'analyst',
    created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at      TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Sessions (server-side)
CREATE TABLE IF NOT EXISTS sessions (
    id              UUID PRIMARY KEY,         -- random v4 generated by the API
    user_id         BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    expires_at      TIMESTAMPTZ NOT NULL,     -- rolling or fixed expiry
    ip              INET,
    user_agent      TEXT
);

CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_sessions_expires_at ON sessions(expires_at);

-- CSRF tokens (if you keep them server-side)
CREATE TABLE IF NOT EXISTS csrf_secrets (
    session_id      UUID PRIMARY KEY REFERENCES sessions(id) ON DELETE CASCADE,
    secret          BYTEA NOT NULL,
    updated_at      TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- (Optional) Seed an initial admin user placeholder (no plaintext password!)
-- Replace <HASH> with a real Argon2id/BCrypt hash generated by your API service.
-- INSERT INTO users (email, password_hash, role) VALUES ('admin@local', '<HASH>', 'admin')
-- ON CONFLICT (email) DO NOTHING;